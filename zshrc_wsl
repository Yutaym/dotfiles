#export LC_ALL=en_US.UTF-8
#export path
# export PATH=/usr/local:$PATH
# export PATH=~/scripts:$PATH
# export PATH=/Library/TeX/texbin:$PATH

# export PATH=/Users/yuta/opt/miniconda3:$PATH
# export PATH=/Users/yuta/opt/miniconda3/bin:$PATH
# export PATH=/Users/yuta/opt/miniconda3/envs:$PATH
# export PATH=/Users/yuta/opt/miniconda3/condabin:$PATH

# export PYENV_ROOT="${HOME}/.pyenv"
# export PATH="${PYENV_ROOT}/shims:$PATH"
# eval "$(pyenv init -)"
# if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi

# export RBENV_ROOT="${HOME}/.rbenv"
# export PATH="${RBENV_ROOT}/bin:$PATH"
# eval "$(rbenv init -)"
# export LUAENV_ROOT="${HOME}/.luaenv"
# export PATH="${LUAENV_ROOT}/bin:$PATH"
# eval "$(luaenv init -)"
# export NODENV_ROOT="${HOME}/.nodenv"
# export PATH="${NODENV_ROOT}/bin:$PATH"
# eval "$(nodenv init -)"
#
# prompt
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/yuta-yamamoto/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/yuta-yamamoto/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/yuta-yamamoto/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/yuta-yamamoto/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
#

export PATH=/home/yuta/scripts:$PATH

export PATH=/mnt/c/Users/yutay/AppData/Local/Programs/Microsoft\ VS\ Code/bin:$PATH

export PATH=~/texlive/2022/bin/win32:$PATH
export PATH=~/miniconda3:$PATH
# export PATH=~/miniconda3/bin:$PATH
export PATH=~/miniconda3/Scripts:$PATH
export PATH=~/miniconda3/envs:$PATH
export PATH=~/miniconda3/condabin:$PATH

if [ -e /usr/local/share/zsh-completions ]; then
    fpath=(/usr/local/share/zsh-completions $fpath)
fi

autoload -U compinit
compinit -u

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}'
zstyle ':completion:*' matcher-list 'm:{:lower:}={:upper:}'
zstyle ':completion:*' matcher-list 'm:{[:lower:]}={[:upper:]}' '+m:{[:upper:]}={[:lower:]}'
zstyle ':completion:*' matcher-list 'm:{[:lower:]}={[:upper:]}' '+m:{[:upper:]}={[:lower:]}'
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]}' '+m:{[:upper:]}={[:lower:]}'

zstyle ':completion:*:default' menu select=1
zstyle ':completion::complete:*' use-cache true
zstyle ':completion:*' list-colors "${LS_COLORS}"
setopt correct
setopt complete_in_word
setopt auto_pushd
setopt pushd_ignore_dups

#color
autoload -Uz colors
colors

# aliases
# executive files

# git
alias g='git'
alias gs='git status'
alias gb='git branch'
alias gc= 'git clone'
alias gco='git checkout'
alias gct='git commit -m'
alias gg='git grep'
alias ga='git add'
alias gd='git diff'
alias gcma='git checkout master'
alias gfu='git fetch upstream'
alias gfo='git fetch origin'
alias gmod='git merge origin/develop'
alias gmud='git merge upstream/develop'
alias gmom='git merge origin/master'
alias gcm='git commit -m'
alias gpo='git push origin'
alias gpom='git push origin master'
alias gst='git stash'
alias gsl='git stash list'
alias gsu='git stash -u'
alias gsp='git stash pop'

alias gl='git log --abbrev-commit --no-merges --date=short --date=iso'
alias glg='git log --abbrev-commit --no-merges --date=short --date=iso --grep'
alias glc='git log --abbrev-commit --no-merges --date=short --date=iso origin/html..html'

#vim
alias v='nvim'
alias vi='nvim'
alias nv='nvim'

#vscode
alias codef='code ./'
alias co='code ./'

#ls
alias ls='ls --color'
alias la='ls -a --color'
alias ll='ls -lh --color'
alias lla='ls -alh --color'
alias lsgr='ls -a --color| grep -E'
alias lso='ls'

#one commands
alias c='clear'
alias h='history'
alias B='./build'
alias lns='ln -snf'
# alias pandoc='/usr/local/bin/pandoc'
#other commands
alias tree="pwd;find . | sort | sed '1d;s/^\.//;s/\/\([^/]*\)$/|--\1/;s/\/[^/|]*/| /g'"
alias pwdc='pwd | tr -d "\n" | pbcopy'
alias gr='grep -E'
alias chx='chmod +x'
#zsh
alias vzsh='nvim ~/.zshrc'
alias szsh='source ~/.zshrc'

alias cowfortune='fortune -s| cowsay'



#histry
HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
setopt share_history
setopt hist_ignore_dups
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt hist_reduce_blanks

#cdr
if [[ -n $(echo ${^fpath}/chpwd_recent_dirs(N)) && -n $(echo ${^fpath}/cdr(N)) ]]; then
    autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
    add-zsh-hook chpwd chpwd_recent_dirs
    zstyle ':completion:*' recent-dirs-insert both
    zstyle ':chpwd:*' recent-dirs-default true
    zstyle ':chpwd:*' recent-dirs-max 1000
    zstyle ':chpwd:*' recent-dirs-file "$HOME/.cache/chpwd-recent-dirs"
fi
#peco
function peco-history-selection() {
    BUFFER=`history -n 1 | tac  | awk '!a[$0]++' | peco`
    CURSOR=$#BUFFER
    zle reset-prompt
}
zle -N peco-history-selection
bindkey '^R' peco-history-selection

function peco-cdr () {
    local selected_dir="$(cdr -l | sed 's/^[0-9]* *//' | peco --prompt="cdr >" --query "$LBUFFER")"
    if [ -n "$selected_dir" ]; then
        BUFFER="cd ${selected_dir}"
        zle accept-line
    fi
}
zle -N peco-cdr
bindkey '^T' peco-cdr

function peco-ghq-look () {
    local ghq_roots="$(git config --path --get-all ghq.root)"
    local selected_dir=$(ghq list --full-path | \
        xargs -I{} ls -dl --time-style=+%s {}/.git | sed 's/.*\([0-9]\{10\}\)/\1/' | sort -nr | \
        sed "s,.*\(${ghq_roots/$'\n'/\|}\)/,," | \
        sed 's/\/.git//' | \
        peco --prompt="cd-ghq >" --query "$LBUFFER")
    if [ -n "$selected_dir" ]; then
        BUFFER="cd $(ghq list --full-path | grep --color=never -E "/$selected_dir$")"
        zle accept-line
    fi
}
zle -N peco-ghq-look
bindkey '^G' peco-ghq-look

 
### optioon
setopt print_eight_bit
setopt auto_cd
setopt no_beep
setopt nolistbeep
setopt auto_pushd
setopt IGNOREEOF
setopt no_flow_control
 
setopt extended_glob
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'
autoload -Uz select-word-style
select-word-style default
zstyle ':zle:*' word-chars "_-./;@"
zstyle ':zle:*' word-style unspecified


autoload -Uz vcs_info
setopt prompt_subst
zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' stagedstr "%F{3}!"
zstyle ':vcs_info:git:*' unstagedstr "%F{1}+"
zstyle ':vcs_info:*' formats "%F{2}%c%u[%b]%f"
zstyle ':vcs_info:*' actionformats '[%b|%a]'
precmd () { vcs_info }
PROMPT='%B%F{2}%n@%m%f%b %F{4}[%D %*]%f ${vcs_info_msg_0_}%B%F{7}%~%f%b %F{4}
>>%f '

eval "$(dircolors -b ~/.dircolors)"


if (which zprof > /dev/null 2>&1) ;then
  zprof
fi

LOCAL_IP=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}')
export DISPLAY=$LOCAL_IP:0i

conda activate base
